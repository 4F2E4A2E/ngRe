Index: src/styles.scss
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/styles.scss	(revision 063471c27cd58bcc2cd80dff923b80a2d4158a77)
+++ src/styles.scss	(date 1564223411586)
@@ -5,6 +5,13 @@
   animation-duration: 5000ms;
   animation-iteration-count: infinite;
   animation-timing-function: linear;
+  width: 10px;
+  text-align: center;
+  font-size: 20px;
+  line-height: 20px;
+  &::after{
+    content: 'â†»';
+  }
 }
 
 @keyframes spin {
Index: src/app/components/let-directive-container/index.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/components/let-directive-container/index.ts	(revision 063471c27cd58bcc2cd80dff923b80a2d4158a77)
+++ src/app/components/let-directive-container/index.ts	(date 1564222852925)
@@ -1,6 +1,8 @@
 import {LetDirectiveFullExampleComponent} from './full-example.component';
 import {LetDirectiveHandlingConditionsComponent} from './handling-conditions.component';
 import {LetDirectiveContainerComponent} from './let-directive-container.component';
+import {LetDirectiveObservableChannelsComponent} from './observable-channels.component';
+import {LetDirectiveSupportedSyntaxComponent} from './supported-syntax.component';
 import {LetDirectiveValueComponent} from './value.component';
 
 export * from './routes';
@@ -8,5 +10,7 @@
   LetDirectiveContainerComponent,
   LetDirectiveFullExampleComponent,
   LetDirectiveHandlingConditionsComponent,
-  LetDirectiveValueComponent
+  LetDirectiveValueComponent,
+  LetDirectiveObservableChannelsComponent,
+  LetDirectiveSupportedSyntaxComponent
 ];
Index: projects/ng-re/src/lib/let/let.directive.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- projects/ng-re/src/lib/let/let.directive.ts	(revision 063471c27cd58bcc2cd80dff923b80a2d4158a77)
+++ projects/ng-re/src/lib/let/let.directive.ts	(date 1564222852917)
@@ -1,9 +1,27 @@
-import {ChangeDetectorRef, Directive, Input, OnInit, TemplateRef, ViewContainerRef} from '@angular/core';
+import {
+  ChangeDetectionStrategy,
+  ChangeDetectorRef,
+  Directive,
+  Input,
+  OnDestroy,
+  OnInit,
+  TemplateRef,
+  ViewContainerRef
+} from '@angular/core';
 import {invalidInputValueError} from 'ng-re/lib/core/invalid_pipe_argument_error';
-import {animationFrameScheduler, combineLatest, EMPTY, isObservable, Observable, of, ReplaySubject} from 'rxjs';
-import {observeOn, startWith, switchMap, tap} from 'rxjs/operators';
-import {LocalStateService} from '../local-state/local-state';
-import {selectSlice} from '../local-state/operators/selectSlice';
+import {
+  animationFrameScheduler,
+  combineLatest,
+  isObservable,
+  NEVER,
+  NextObserver,
+  Observable,
+  Observer,
+  ReplaySubject,
+  Subject
+} from 'rxjs';
+import {isObject} from 'rxjs/internal-compatibility';
+import {map, observeOn, startWith, switchAll, takeUntil, tap} from 'rxjs/operators';
 
 const selector = 'ngReLet';
 
@@ -12,75 +30,121 @@
     // to enable let we have to use $implicit
     public $implicit?: any,
     // to enable as we have to assign this
-    public ngReLet?: any
+    public ngReLet?: any,
+    // value of error of undefined
+    public $error?: any,
+    // true or undefined
+    public $complete?: any
   ) {
   }
 }
 
 @Directive({
-  selector: '[ngReLet]',
-  providers: [LocalStateService]
+  selector: '[ngReLet]'
 })
-export class LetDirective implements OnInit {
-  private context = new LetContext({});
+export class LetDirective<T> implements OnInit, OnDestroy {
+  private onDestroy$ = new Subject();
+
+  private context = new LetContext();
   private af$ = new ReplaySubject(1);
+  private observables$: ReplaySubject<Observable<T>> = new ReplaySubject(1);
 
   @Input()
-  set ngReLet(o: { [key: string]: Observable<any> } | Observable<any>) {
+  set ngReLet(o: Observable<T>) {
     if (o === null || o === undefined) {
-      this.lS.connectSlices({[selector]: EMPTY});
+      this.observables$.next(NEVER);
     } else if (isObservable(o)) {
-      this.lS.connectSlices({[selector]: o});
+      this.observables$.next(o);
     } else {
       throw invalidInputValueError(LetDirective, selector);
     }
   }
 
   @Input()
-  set afOn(o: boolean) {
-    this.af$.next(o);
+  set ngReLetUseAf(bool: boolean) {
+    this.af$.next(bool);
   }
+
+  resetContextObserver: NextObserver<Observable<T>> = {
+    // for every value reset context
+    next: (_) => {
+      // @TODO find out why we have to mutate the context object
+      this.context.$implicit = undefined;
+      this.context.ngReLet = undefined;
+      this.context.$error = undefined;
+      this.context.$complete = undefined;
+    }
+  };
+
+  updateContextObserver: Observer<T> = {
+    next: (v) => {
+      // @TODO find out why we have to mutate the context object
+      // to enable `let` syntax we have to use $implicit (var; let v = var)
+      this.context.$implicit = v;
+      // to enable `as` syntax we have to assign the directives selector (var as v)
+      this.context.ngReLet = v;
+      // @TODO Too much and remove?
+      if (isObject(v)) {
+        Object.entries(v).forEach(([key, value]) => this.context[key] = value);
+      }
+    },
+    error: (e) => {
+      // set context var complete to true (var$; let v = $error)
+      this.context.$error = e;
+    },
+    complete: () => {
+      // set context var complete to true (var$; let v = $complete)
+      this.context.$complete = true;
+    }
+  };
 
   constructor(
-    private lS: LocalStateService,
     private cd: ChangeDetectorRef,
     private readonly templateRef: TemplateRef<LetContext>,
     private readonly viewContainerRef: ViewContainerRef
   ) {
-    this.context.$implicit = undefined;
-    this.context.ngReLet = undefined;
-
     combineLatest(
-      this.lS.state$.pipe(selectSlice((s) => s[selector])),
-      this.af$.pipe(startWith(false)))
+      this.observables$.asObservable()
+        .pipe(
+          tap(this.resetContextObserver),
+          tap(_ => this.renderChange())
+        ),
+      this.af$.pipe(startWith(false))
+    )
       .pipe(
-        switchMap(([state, af]) => af ?
-          // apply scheduling
-          of(state).pipe(observeOn(animationFrameScheduler)) :
-          of(state)),
-        // running zone-less
-        // @TODO replace with detectChange after ivy fix
-        tap(_ => this.cd.markForCheck())
+        map(([state$, af]) => {
+            state$ = af ?
+              // apply scheduling
+              state$.pipe(observeOn(animationFrameScheduler)) :
+              state$;
+
+            return state$.pipe(
+              // update context variables
+              tap(this.updateContextObserver),
+              tap(_ => this.renderChange())
+            );
+          }
+        ),
+        switchAll(),
+        takeUntil(this.onDestroy$)
       )
-      .subscribe(this.updateContext);
+      .subscribe();
   }
 
-  updateContext = (v) => {
-    // to enable `let` syntax we have to use $implicit (var; let v = var)
-    this.context.$implicit = v;
-    // to enable `as` syntax we have to assign the directives selector (var as v)
-    this.context.ngReLet = v;
-    // @TODO Too much and remove?
-    // tslint:disable-next-line
-    Object.entries(v || {}).map(([key, value]) => {
-      console.log('key', key, value);
-      return this.context[key] = value;
-    });
+  renderChange() {
+    // @TODO replace with `.detectChange()` after ivy fix
+    // running zone-less with detectChange
+    this.cd.markForCheck();
   }
 
   ngOnInit() {
+    // @TODO https://github.com/angular/angular/issues/15280#issuecomment-430479166
     this.viewContainerRef
       .createEmbeddedView(this.templateRef, this.context);
   }
 
+  ngOnDestroy(): void {
+    this.onDestroy$.next();
+  }
+
 }
Index: src/app/components/let-directive-container/handling-conditions.component.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/components/let-directive-container/handling-conditions.component.ts	(revision 063471c27cd58bcc2cd80dff923b80a2d4158a77)
+++ src/app/components/let-directive-container/handling-conditions.component.ts	(date 1564223382294)
@@ -5,38 +5,45 @@
 @Component({
   selector: 'app-let-directive-handling-conditions',
   template: `
-    <h1>*ngReLet Handle Conditions</h1>
+    <h2>*ngReLet Handle Conditions</h2>
 
-    <app-let-directive-value *ngIf="val1$ | async as val1; else placeholder" [value]="val1">
+    <app-let-directive-value *ngIf="boolean1$ | async as val1; else placeholder" [value]="val1">
     </app-let-directive-value>
     <ng-template #placeholder>
-      <div class="spin" style="width: 100px">Placeholder Content Here</div>
+      <div class="spin"></div>
     </ng-template>
 
     <ng-container
-      *ngReLet="val1$ as val1">
+      *ngReLet="boolean1$ as val1">
       <pre>{{val1 | json}}</pre>
-      <app-let-directive-value *ngIf="val1; else placeholder" [value]="val1">
-      </app-let-directive-value>
-      <ng-template #placeholder>
-        <div class="spin" style="width: 100px">Placeholder Content Here</div>
+      <div *ngIf="val1 === undefined; else placeholder"
+        class="spin">
+        
+      </div>
+      <ng-template #placeholder>
+
+        <app-let-directive-value *ngIf="val1 === true" [value]="val1">
+        </app-let-directive-value>
+
+        <app-let-directive-value *ngIf="val1 === false" [value]="val1">
+        </app-let-directive-value>
+
       </ng-template>
     </ng-container>
   `
 })
 export class LetDirectiveHandlingConditionsComponent {
 
-  val1$ = this.getHotRandomInterval('test$', 3000);
+  boolean1$: Observable<boolean> = this.getHotRandomBoolena(2000);
 
   constructor() {
   }
 
-  getHotRandomInterval(name: string, intVal: number = 1000): Observable<{ [key: string]: number }> {
+  getHotRandomBoolena(intVal: number = 1000): Observable<boolean> {
     return interval(intVal)
       .pipe(
-        map(_ => ({[name]: Math.random()})),
-        share(),
-        filter((v, i) => i < 1)
+        map(_ => Math.random() < 0.5),
+        share()
       );
   }
 }
Index: src/app/components/let-directive-container/routes.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/components/let-directive-container/routes.ts	(revision 063471c27cd58bcc2cd80dff923b80a2d4158a77)
+++ src/app/components/let-directive-container/routes.ts	(date 1564222852929)
@@ -1,6 +1,7 @@
 import {LetDirectiveFullExampleComponent} from './full-example.component';
 import {LetDirectiveHandlingConditionsComponent} from './handling-conditions.component';
 import {LetDirectiveContainerComponent} from './let-directive-container.component';
+import {LetDirectiveObservableChannelsComponent} from './observable-channels.component';
 
 export const LET_ROUTES = [
   {
@@ -14,6 +15,10 @@
       {
         path: 'handling-conditions',
         component: LetDirectiveHandlingConditionsComponent
+      },
+      {
+        path: 'observable-channels',
+        component: LetDirectiveObservableChannelsComponent
       }
     ]
   }
Index: src/app/components/let-directive-container/full-example.component.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/components/let-directive-container/full-example.component.ts	(revision 063471c27cd58bcc2cd80dff923b80a2d4158a77)
+++ src/app/components/let-directive-container/full-example.component.ts	(date 1564222852921)
@@ -6,69 +6,14 @@
   selector: 'app-let-directive-full-example',
   template: `
     <h2>*Full Example</h2>
-
-    <p>
-      Binding with as syntax <code>*ngReLet="val1$ as o"</code>
-    </p>
-    <ng-container
-      *ngReLet="val1$ as o">
-      <pre>{{(o | json) || 'undefined'}}</pre>
-      <app-let-directive-value [value]="o"></app-let-directive-value>
-    </ng-container>
-
-    <p>
-      Binding composed object <code>*ngReLet="combinedInComponent$ as o"</code>
-    </p>
-    <ng-container
-      *ngReLet="combinedInComponent$ as o">
-      <pre>{{o | json}}</pre>
-      <app-let-directive-value [value]="o"></app-let-directive-value>
-    </ng-container>
-
-    <p>
-      Binding an object of single values <code>*ngReLet="combinedInComponent$ as o; val1 as val1; val2 as val2"</code>
-    </p>
-    <ng-container
-      *ngReLet="combinedInComponent$; val1 as val1; val2 as val2">
-      <pre>{{val1 | json}}</pre>
-      <pre>{{val2 | json}}</pre>
-      <app-let-directive-value [value]="val1"></app-let-directive-value>
-      <app-let-directive-value [value]="val2"></app-let-directive-value>
-    </ng-container>
-
-    <p>
-      Binding an object of single values <code>*ngReLet="combinedInComponent$; let val1 = val1; let val2 = val2"</code>
-    </p>
-    <ng-container
-      *ngReLet="combinedInComponent$; let val1 = val1; let val2 = val2">
-      <pre>{{val1 | json}}</pre>
-      <pre>{{val2 | json}}</pre>
-      <app-let-directive-value [value]="val1"></app-let-directive-value>
-      <app-let-directive-value [value]="val2"></app-let-directive-value>
-    </ng-container>
+    
+    https://github.com/angular/angular/issues/15280#issuecomment-290913071
+    
+    <app-let-directive-supported-syntax></app-let-directive-supported-syntax>
+    <app-let-directive-handling-conditions></app-let-directive-handling-conditions>
+    <app-let-directive-observable-channels></app-let-directive-observable-channels>
   `
 })
 export class LetDirectiveFullExampleComponent {
 
-  val1 = Math.random() * 100;
-  val2 = Math.random() * 100;
-
-  val1$ = this.getHotRandomInterval('val1', 1000).pipe(take(2));
-  val2$ = this.getHotRandomInterval('val2', 1000).pipe(take(2));
-  combinedInComponent$ = combineLatest(
-    this.val1$,
-    this.val2$,
-    (val1, val2) => ({...val1, ...val2}));
-
-  constructor() {
-  }
-
-  getHotRandomInterval(name: string, intVal: number = 1000): Observable<{ [key: string]: string }> {
-    return interval(intVal)
-      .pipe(
-        map((_, i) => ({[name]: i + ':' + Math.random()})),
-        share(),
-        filter((v, i) => i < 1)
-      );
-  }
 }
Index: src/app/components/let-directive-container/let-directive-container.component.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/components/let-directive-container/let-directive-container.component.ts	(revision 063471c27cd58bcc2cd80dff923b80a2d4158a77)
+++ src/app/components/let-directive-container/let-directive-container.component.ts	(date 1564222852925)
@@ -13,24 +13,12 @@
       <li>
         <a routerLink="./handling-conditions">Handling Conditions</a>
       </li>
+      <li>
+        <a routerLink="./observable-channels">Observable Channels</a>
+      </li>
     </ul>
     <router-outlet></router-outlet>`
 })
 export class LetDirectiveContainerComponent {
 
-  test$ = this.getHotRandomInterval('test$', 1000);
-  test2$ = this.getHotRandomInterval('test2$', 1000);
-  observables$ = {test: this.test$, test2: this.test2$};
-
-  constructor() {
-  }
-
-  getHotRandomInterval(name: string, intVal: number = 1000): Observable<{ [key: string]: number }> {
-    return interval(intVal)
-      .pipe(
-        map(_ => ({[name]: Math.random()})),
-        share(),
-        filter((v, i) => i < 1)
-      );
-  }
 }
Index: src/app/components/let-directive-container/supported-syntax.component.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/components/let-directive-container/supported-syntax.component.ts	(date 1564222852929)
+++ src/app/components/let-directive-container/supported-syntax.component.ts	(date 1564222852929)
@@ -0,0 +1,82 @@
+import {Component} from '@angular/core';
+import {combineLatest, interval, Observable} from 'rxjs';
+import {filter, map, share, take} from 'rxjs/operators';
+
+@Component({
+  selector: 'app-let-directive-supported-syntax',
+  template: `
+    <h2>*ngReLet Supported Syntax</h2>
+    <p>
+      Binding with as syntax <code>*ngReLet="val1$ as o"</code>
+    </p>
+    <ng-container
+      *ngReLet="val1$ as o">
+      <pre>{{(o | json) || 'undefined'}}</pre>
+      <app-let-directive-value [value]="o"></app-let-directive-value>
+    </ng-container>
+
+    <p>
+      Binding composed object <code>*ngReLet="combinedInComponent$ as o"</code>
+    </p>
+    <ng-container
+      *ngReLet="combinedInComponent$ as o">
+      <pre>{{o | json}}</pre>
+      <app-let-directive-value [value]="o"></app-let-directive-value>
+    </ng-container>
+
+    <p>
+      Binding an object of single values <code>*ngReLet="combinedInComponent$ as o; val1 as val1; val2 as val2"</code>
+    </p>
+    <ng-container
+      *ngReLet="combinedInComponent$; val1 as val1; val2 as val2">
+      <pre>{{val1 | json}}</pre>
+      <pre>{{val2 | json}}</pre>
+      <app-let-directive-value [value]="val1"></app-let-directive-value>
+      <app-let-directive-value [value]="val2"></app-let-directive-value>
+    </ng-container>
+
+    <p>
+      Binding an object of single values <code>*ngReLet="combinedInComponent$; let val1 = val1; let val2 = val2"</code>
+    </p>
+    <ng-container
+      *ngReLet="combinedInComponent$; let val1 = val1; let val2 = val2">
+      <pre>{{val1 | json}}</pre>
+      <pre>{{val2 | json}}</pre>
+      <app-let-directive-value [value]="val1"></app-let-directive-value>
+      <app-let-directive-value [value]="val2"></app-let-directive-value>
+    </ng-container>
+
+    <p>
+      Use animationFrameScheduler<code>*ngReLet="val1$ as o; useAf:true"</code>
+    </p>
+    <ng-container
+      *ngReLet="val1$ as o; useAf:true">
+      <pre>{{(o | json) || 'undefined'}}</pre>
+      <app-let-directive-value [value]="o"></app-let-directive-value>
+    </ng-container>
+  `
+})
+export class LetDirectiveSupportedSyntaxComponent {
+
+  val1 = Math.random() * 100;
+  val2 = Math.random() * 100;
+
+  val1$ = this.getHotRandomInterval('val1', 1000).pipe(take(2));
+  val2$ = this.getHotRandomInterval('val2', 1000).pipe(take(2));
+  combinedInComponent$ = combineLatest(
+    this.val1$,
+    this.val2$,
+    (val1, val2) => ({...val1, ...val2}));
+
+  constructor() {
+  }
+
+  getHotRandomInterval(name: string, intVal: number = 1000): Observable<{ [key: string]: string }> {
+    return interval(intVal)
+      .pipe(
+        map((_, i) => ({[name]: i + ':' + Math.random()})),
+        share(),
+        filter((v, i) => i < 1)
+      );
+  }
+}
Index: README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- README.md	(revision 063471c27cd58bcc2cd80dff923b80a2d4158a77)
+++ README.md	(date 1564226334031)
@@ -472,7 +472,7 @@
 > **Performance optimisations**
 > - consider scheduling over `AnimationFrameScheduler` the output is always for the view
 
-> **Implement strick and consistent handling of undefined for pipes**   
+> **Implement strict and consistent handling of undefined for pipes**   
 > A pipe similar to `async` that should act as follows:
 > - when initially passed `undefined` the pipe should **forward `undefined`** as value as on value ever was emitted
 > - when initially passed `null` the pipe should **forward `null`** as value as on value ever was emitted
@@ -482,6 +482,10 @@
 > - when initially passed `NEVER` the pipe should **forward `undefined`** as value as on value ever was emitted
 > - when reassigned a new `Observable` the pipe should **forward `undefined`** as value as on value was emitted from the new
 > - when completed the pipe should **forward the last value** as value until reassigned another observable
+> - when sending a value the pipe should **forward the value** without changing it
+
+Already existing similar packages:    
+- https://github.com/ngrx-utils/ngrx-utils#push-pipe
 
 ##### Nested Template Scopes   
 One more downside here. If we use the `as` template syntax and have multiple observable presents in the same div we run into some annoying situation where we have to nest multiple divs to have a context per bound variable.
@@ -550,8 +554,8 @@
     } as c">
     <app-color [color]="c.color" [shape]="c.shape" [name]="c.name">
     </app-color>  
-    <app-color [color]="c.color" [shape]="c.shape" [name]="c.name">
-    </app-color>
+    <app-other-thing [color]="c.color" [shape]="c.shape" [name]="c.name">
+    </app-other-thing>
   </ng-container>
   `})
 export class AppComponent  {
@@ -591,12 +595,27 @@
 }
 ```
 
-**Providing Placeholder Content over the `; else #Temlate` syntax**
-TBD
+**Providing Conditional Content over the `; else #Temlate` Syntax**
 
-
-**Providing Placeholder Content over `ng-content` wrapper**
-TBD
+```html
+@Component({
+  selector: 'my-app',
+  template: `
+    <div *ngIf="boolean1$ | async as val1; else placeholder">
+      <p *ngIf="val1 === true">TRUE VALUE</p>
+      <p *ngIf="val1 === false">FALSE VALUE</p>
+    </div>
+    <ng-template #placeholder>
+      <div class="spin" style="width: 100px">
+        â†»
+      </div>
+    </ng-template>
+  `})
+export class AppComponent  {
+  boolean$ = interval(5000)
+    .pipe(map(_ => Math.randow() < 0.5));
+}
+```
 
 **Needs:**   
 A disadvantage here is the availability of the context. It should be always present and not displaying/hiding something.
@@ -605,19 +624,23 @@
 > **Implement more convenient binding syntax**   
 > To improve usability we should fulfill the following:
 > - the context should be always present. `*ngIf="{}"` would do that already
-> - controlled change detection to run zone-less
 > - avoid multiple usages of the `async pipe
 > - better control over the context. Maybe we could get rid of the `as` as variable??
 > - implement an internal layer to handle null vs undefined etc
 > - implement the option to put additional logic for complete and error of an observable
+
+> **More performant performant/instant solution**
 > - consider scheduling over `AnimationFrameScheduler` the output is always for the view
 > - handling changes could be done programmatically. Good for running zone-less
-
+ 
+> **Implement strict and consistent handling of nuul/undefined for the bound value**    
+> Please visit the section [Input Binding](Input-Binding) for a full list of requirements
 
 Already existing similar packages:    
 - https://www.npmjs.com/package/rx-context
 - https://netbasal.com/diy-subscription-handling-directive-in-angular-c8f6e762697f
 - https://github.com/ngrx-utils/ngrx-utils#nglet-directive
+- https://www.npmjs.com/package/@se-ng/let
 
 ---   
 
@@ -1111,52 +1134,53 @@
 One time tin the template to render the form, the second time in the construtor to forward form value changes to the `EventEmitter`.
 Due to the fact that the `formGroup$` observbale is cold (every subscriber revieves a unique producer) we instanciate the `FormGroup` once per subscription.
  
-**Multicaste the referene**
-```typescriptimport {ChangeDetectionStrategy, Component, EventEmitter, Input, Output} from '@angular/core';
+**Multicast the reference problem**
+
+```typescript
 @Component({
   selector: 'app-sharing-a-reference',
   template: `
     <h2>Sharing a reference</h2>
-    <p><b>default$:</b></p>
-    <form *ngIf="(formGroup$ | async$) as formGroup" [formGroup]="formGroup">
-      <div *ngFor="let c of formGroup.controls | keyvalue">
-        <label>{{c.key}}</label>
-        <input [formControlName]="c.key"/>
-      </div>
-    </form>
+    <p><b>newObject$:</b></p>
+    <div>
+      {{newObject$ | async | json}}
+    </div>
   `
 })
 export class SharingAReferenceComponent {
-  state$ = new ReplaySubject(1);
-  @Input()
-  set formGroupModel(value) {
-    this.state$.next(value);
+  newObject$ = of(Math.random());
+    
+  constructor() {
+    this.newObject$
+      .subscribe(console.log);
   }
 
-  @Output() formValueChange = new EventEmitter();
+}
+```
 
-  formGroup$: Observable<FormGroup> = combineLatest(this.state$, this.router.params)
-    .pipe(
-      map(this.preparingFormGroupConfig),
-      map(config => this.fb.group(config)),
-      shareReplay(1)
-    );
-    
-  constructor(
-    private fb: FormBuilder,
-    private router: ActivatedRoute
-  ) {
-    this.formGroup$
-      .pipe(
-        switchMap((fg: FormGroup) => fg.valueChanges)
-      )
-      .subscribe(v => this.formValueChange.emit(v));
-  }
+As we see we end up with 2 different numbers. 
+
 
-  preparingFormGroupConfig([modelFromInput, modelFromRouterParams]) {
-    // override defaults with router params if exist
-    return Object.entries({...modelFromInput, ...modelFromRouterParams})
-      .reduce((c, [name, initialValue]) => ({...c, [name]: [initialValue]}), {});
+**Multicast the reference solution**
+
+```typescript
+@Component({
+  selector: 'app-sharing-a-reference',
+  template: `
+    <h2>Sharing a reference</h2>
+    <p><b>newObject$:</b></p>
+    <div>
+      {{newObject$ | async | json}}
+    </div>
+  `
+})
+export class SharingAReferenceComponent {
+  newObject$ = of(Math.random())
+    .pipe(share());
+    
+  constructor() {
+    this.newObject$
+      .subscribe(console.log);
   }
 
 }
@@ -1494,8 +1518,6 @@
               shape: observable2$ | async,
               name:  observable3$ | async
             } as c">
-  <app-color [color]="c.color" [shape]="c.shape" [name]="c.name">
-  </app-color>  
   <app-color [color]="c.color" [shape]="c.shape" [name]="c.name">
   </app-color>  
 </ng-container>
@@ -1508,8 +1530,6 @@
 <!-- observables = { color: observable1$, shape: observable2$, name:  observable3$ } -->
 
 <ng-container *let="observables as c">
-  <app-color [color]="c.color" [shape]="c.shape" [name]="c.name">
-  </app-color>
   <app-color [color]="c.color" [shape]="c.shape" [name]="c.name">
   </app-color>
 </ng-container>
@@ -1517,13 +1537,9 @@
 <ng-container *let="observables; let c">
   <app-color [color]="c.color" [shape]="c.shape" [name]="c.name">
   </app-color>
-  <app-color [color]="c.color" [shape]="c.shape" [name]="c.name">
-  </app-color>
 </ng-container>
 
 <ng-container *let="observables; color as c; shape as s; name as n">
-  <app-color [color]="c" [shape]="s" [name]="n">
-  </app-color>
   <app-color [color]="c" [shape]="s" [name]="n">
   </app-color>
 </ng-container>
Index: src/app/components/let-directive-container/observable-channels.component.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/components/let-directive-container/observable-channels.component.ts	(date 1564222852929)
+++ src/app/components/let-directive-container/observable-channels.component.ts	(date 1564222852929)
@@ -0,0 +1,46 @@
+import {Component} from '@angular/core';
+import {interval, Observable} from 'rxjs';
+import {filter, map, share, take} from 'rxjs/operators';
+
+@Component({
+  selector: 'app-let-directive-observable-channels',
+  template: `
+    <h2>*ngReLet Observable Channels</h2>
+
+    <button (click)="assignObservable()">assignObservable</button>
+    <button (click)="assignUndefined()">assignUndefined</button>
+
+    <ng-container
+      *ngReLet="val1$ as val1; let error = $error; let complete = $complete">
+      <p><b>next:</b></p>
+      <pre>{{(val1 | json) || 'undefined'}}</pre>
+      <p><b>error:</b></p>
+      <pre>{{(error | json) || 'undefined'}}</pre>
+      <p><b>complete:</b></p>
+      <pre>{{(complete | json) || 'undefined'}}</pre>
+    </ng-container>
+  `
+})
+export class LetDirectiveObservableChannelsComponent {
+
+  val1$;
+
+  constructor() {
+  }
+
+  assignObservable() {
+    this.val1$ = this.getHotRandomInterval('test$', 1000).pipe(take(5));
+  }
+
+  assignUndefined() {
+    this.val1$ = undefined;
+  }
+
+  getHotRandomInterval(name: string, intVal: number = 1000): Observable<{ [key: string]: number }> {
+    return interval(intVal)
+      .pipe(
+        map(_ => ({[name]: Math.random()})),
+        share()
+      );
+  }
+}
